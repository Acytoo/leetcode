#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <queue>
#include <climits>
#include <stack>
#include <algorithm>
#include <cmath>
#include <set>
#include <unordered_map>
#include <list>
#include <unordered_set>
#include <map>
#include <functional>
#include <bitset>
#include <numeric>
#include <deque>
#include <mutex>
#include <utility>
#include <memory>
#include <cstring>

using namespace std;
// BFS
static int x = [] () {ios::sync_with_stdio(false); cin.tie(0); return 0;} ();
class Solution {
 public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int min_infected = INT_MAX, res = -1;
    const int n = graph.size();
    sort(initial.begin(), initial.end());

    for (const int removed_node: initial) {
      bitset<301> zombie;
      queue<int> q;
      for (const int init_node: initial) {
        if (removed_node == init_node) continue;
        zombie[init_node] = 1;
        q.push(init_node);
      }
      int infected = initial.size() - 1;
      while (!q.empty()) {
        int tmp = q.size();
        while (tmp--) {
          int cur = q.front(); q.pop();
          for (int i = 0; i < n; ++i) {
            if (graph[cur][i] && !zombie[i]) {
              zombie[i] = 1;
              q.push(i);
              ++infected;
            }
          }
        }
      }
      if (infected < min_infected) {
        res = removed_node;
        min_infected = infected;
      }
    }

    return res;
  }
};

int main() {
  Solution s;
  
  return 0;
}
